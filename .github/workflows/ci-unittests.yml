# This is a basic workflow to help you get started with Actions

name: CI Unittests

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  schedule:
      # Nightly run unit tests to check for implicit dependency issues between pull requests.
      - cron: '0 0 * * *'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

defaults:
  run:
    shell: bash

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
# NOTE: Github actions does not support anchors apparently. Forgive duplication of job
#       steps.
jobs:
  lint:
    runs-on: ubuntu-latest
    container: python:3.6
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      # Cache local python environment artifacts for the current python version
      # and poetry lockfile hash.
      - uses: actions/cache@v2
        id: env-cache
        with:
          # Confirmed that the `.local` directory doesn't exist until the
          # `pip install --user` is invoked below, so we can be confident that
          # only our python stuff is being captured in this cache (intentional).
          path: |
            ~/.cache/pypoetry/virtualenvs/
            ~/.local
          key: python-3.6-${{ hashFiles('poetry.lock') }}
      - name: Setup Environment
        # See: https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#example-using-a-public-action-in-a-subdirectory
        uses: Kitware/SMQTK-Core/.github/actions/python-poetry-setup@master
      - name: Lint with Flake8
        run: poetry run flake8

  typecheck:
    runs-on: ubuntu-latest
    container: python:3.6
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      # Cache local python environment artifacts for the current python version
      # and poetry lockfile hash.
      - uses: actions/cache@v2
        id: env-cache
        with:
          # Confirmed that the `.local` directory doesn't exist until the
          # `pip install --user` is invoked below, so we can be confident that
          # only our python stuff is being captured in this cache (intentional).
          path: |
            ~/.cache/pypoetry/virtualenvs/
            ~/.local
          key: python-3.6-${{ hashFiles('poetry.lock') }}
      - name: Setup Environment
        # See: https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#example-using-a-public-action-in-a-subdirectory
        uses: Kitware/SMQTK-Core/.github/actions/python-poetry-setup@master
      - name: Typecheck with MyPy
        run: poetry run mypy

  unittests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.6, 3.7, 3.8, 3.9]
      # We want all python versions tested even if one of them happens to fail
      fail-fast: false

    container: python:${{ matrix.python-version }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      # Cache local python environment artifacts for the current python version
      # and poetry lockfile hash.
      - uses: actions/cache@v2
        id: env-cache
        with:
          # Confirmed that the `.local` directory doesn't exist until the
          # `pip install --user` is invoked below, so we can be confident that
          # only our python stuff is being captured in this cache (intentional).
          path: |
            ~/.cache/pypoetry/virtualenvs/
            ~/.local
          key: python-${{ matrix.python-version }}-${{ hashFiles('poetry.lock') }}
      - name: Setup Environment
        # See: https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#example-using-a-public-action-in-a-subdirectory
        uses: Kitware/SMQTK-Core/.github/actions/python-poetry-setup@master
      - name: Run Unittests
        run: poetry run pytest

      - name: CodeCov report submission
        uses: codecov/codecov-action@v1
        with:
          fail_ci_if_error: true
          files: coverage.xml
          flags: unittests

  docker:
    runs-on: ubuntu-latest

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      # Cache local python environment artifacts for the current python version
      # and poetry lockfile hash.
      - uses: actions/cache@v2
        id: env-cache
        with:
          # Confirmed that the `.local` directory doesn't exist until the
          # `pip install --user` is invoked below, so we can be confident that
          # only our python stuff is being captured in this cache (intentional).
          path: |
            ~/.cache/pypoetry/virtualenvs/
            ~/.local
          key: python-${{ matrix.python-version }}-${{ hashFiles('poetry.lock') }}

      # Create .env file since it is not created initially
      - name: Create env file
        run: |
          touch .env
          echo SMQTK_REGISTRY="gitlab.kitware.com:4567/smqtk/smqtk-iqr" >> .env
          echo CUDA_DEVEL_IMAGE_TAG="9.2-cudnn7-devel-ubuntu18.04" >> .env
          echo CUDA_RUNTIME_IMAGE_TAG="9.2-cudnn7-runtime-ubuntu18.04" >> .env
          echo FAISS_VERSION="1.6.2" >> .env
          echo SMQTK_TAG="latest" >> .env

      - name: Build docker image
        run: |
          docker login gitlab.kitware.com:4567 -u gl-container-ci -p ${{ secrets.GITLAB_CONTAINER_TOKEN  }}
          docker pull gitlab.kitware.com:4567/smqtk/smqtk-iqr/tpl-caffe:1.0-base
          docker pull gitlab.kitware.com:4567/smqtk/smqtk-iqr/tpl-caffe:1.0-cpu
          docker pull gitlab.kitware.com:4567/smqtk/smqtk-iqr/tpl-caffe:1.0-cuda9.2-cudnn7-devel-ubuntu18.04
          docker pull gitlab.kitware.com:4567/smqtk/smqtk-iqr/tpl-faiss:1.6.2-cuda9.2-cudnn7-devel-ubuntu18.04
          docker pull gitlab.kitware.com:4567/smqtk/smqtk-iqr/iqr_playground:latest-cpu
          docker pull gitlab.kitware.com:4567/smqtk/smqtk-iqr/iqr_playground:latest-cuda9.2-cudnn7-runtime-ubuntu18.04
          docker-compose --env-file ".env" -f "docker/docker-compose.build.yml" build
          docker push gitlab.kitware.com:4567/smqtk/smqtk-iqr/tpl-caffe:1.0-base
          docker push gitlab.kitware.com:4567/smqtk/smqtk-iqr/tpl-caffe:1.0-cpu
          docker push gitlab.kitware.com:4567/smqtk/smqtk-iqr/tpl-caffe:1.0-cuda9.2-cudnn7-devel-ubuntu18.04
          docker push gitlab.kitware.com:4567/smqtk/smqtk-iqr/tpl-faiss:1.6.2-cuda9.2-cudnn7-devel-ubuntu18.04
          docker push gitlab.kitware.com:4567/smqtk/smqtk-iqr/iqr_playground:latest-cpu
          docker push gitlab.kitware.com:4567/smqtk/smqtk-iqr/iqr_playground:latest-cuda9.2-cudnn7-runtime-ubuntu18.04
